/*!
\page sdr_page_front Sdr : Shader Definition Registry
\if ( PIXAR_MFB_BUILD )
\mainpage Sdr : Shader Definition Registry
\endif

\note The Ndr library is deprecated and will be deleted soon. Use this
Sdr library instead.

Sdr provides a framework in which you can register shader
nodes with Sdr, and subsequently ask for information about those nodes.
Additionally, shader node parsing and "discovery" are done via
plugins to keep Sdr extendable.

\tableofcontents

\section sdr_Organization Sdr Organization
Sdr can be split into 5 major components, as described by the following
subsections.

\subsection sdr_Registry Sdr Registry
The core Sdr registry, `SdrRegistry`, is where shader node-level queries are done.
Upon initialization, the registry searches for all parser and discovery plugins.
During this start-up phase the discovery plugins are all run, but the nodes that
are found are NOT parsed. The registry parses nodes on demand when information
about a node(s) is requested in order to keep the start-up process as fast as possible.

The type of information that the Sdr registry provides includes:
<ul>
    <li>The names of shader nodes that have been registered</li>
    <li>Parsed shader node instances (created on-demand when requested)</li>
    <li>Where the shader nodes were found</li>
</ul>

\subsection sdr_ShaderNode Sdr Shader Node
Sdr provides a node class, `SdrShaderNode`, which exposes information such as:

<ul>
    <li>The shader node type</li>
    <li>What the inputs and outputs are</li>
    <li>Any metadata attached to the shader node</li>
</ul>

An SdrShaderNode represents a dataflow-connectable computation, intended to be a 
node in a computational network.  A node's SdrShaderProperty's represent its 
computational inputs and outputs, and its __URI__'s identify its external
sources:
- SdrShaderNode::GetResolvedDefinitionURI() identifies the asset that provided
  the definition of the node, which is determined during 
  \ref sdr_DiscoveryPlugin "node discovery."
- SdrShaderNode::GetResolvedImplementationURI() identifies (if relevant) an 
  implementation of the node's computation, for use by clients of computational
  networks in which node instances may appear. It is the responsibility of a
  \ref sdr_ParserPlugin "parser plugin" to determine and resolve an 
  implementation from the node's definition.

\subsection sdr_ShaderProperty Sdr Shader Property
Sdr also provides a property class, `SdrShaderProperty`. Inputs and outputs are
on a node are collectively identified as "properties".

The shader property exposes information like:
<ul>
    <li>The input type</li>
    <li>The default value, if any</li>
    <li>Any metadata attached to the shader property</li>
    <li>Whether the shader property is connectable</li>
</ul>

\subsection sdr_DiscoveryPlugin Discovery Plugins
Discovery plugins are how the shader registry finds (or "discovers") shader nodes. The
registry makes no assumptions on where, or how, nodes are stored. A discovery
plugin can be built to find file-based nodes on the filesystem (a typical case),
search a database, a cloud service, or any other system that might contain nodes.
 If nodes are scattered across multiple systems, a discovery plugin can be
created for each. More info about discovery plugins is available in the
`SdrDiscoveryPlugin` documentation.

Note that a filesystem-based discovery plugin is active by default. More
information on how to configure this plugin can be found in the documentation
for `_SdrFilesystemDiscoveryPlugin`. In a nutshell, there are a few environment
variables that can be configured to control its behavior. However, the more
robust pattern that any renderer or shading-system plugin should follow is to
provide its __own__ DiscoveryPlugin, so that its configuration will not interfere
with that of other plugins.  The filesystem discovery machinery that the builtin
`_SdrFilesystemDiscoveryPlugin` plugin uses is available for other discovery
plugins to use - see SdrFsHelpersDiscoverShaderNodes().

\subsection sdr_ParserPlugin Parser Plugins
Once the registry knows about shader nodes via the discovery plugin(s), the parser
plugins parse the nodes and provide the registry with the resulting information.
The parser plugins are responsible for information such as the node's type,
its metadata, and all information about its inputs and outputs. In the end,
the parser plugin is responsible for determining all information about the node
that could not otherwise be determined via the discovery plugin. More
information about parser plugins is available in the `SdrParserPlugin`
documentation.

\section sdr_customDiscovery Custom Discovery Plugin
See the documentation for `SdrDiscoveryPlugin` for more information.

\section sdr_customParser Custom Parser Plugin
See the documentation for `SdrParserPlugin` for more information.

# Discussion of SdrPropertyTypes {#SdrPropertyTypes}

Sdr defines a limited set of types:
- Int
- String
- Float
- Color
- Point
- Normal
- Vector
- Matrix
- Struct
- Terminal
- VStruct
- Unknown


## Two notions of types (SdrPropertyType and SdfValueTypeName)

The SdrPropertyType is not written out to a USD layer, but with the aid of other
information and metadata gathered from a node's shader definition, the
SdrPropertyType is mapped to an SdfValueTypeName that is written into USD
layers.  The SdfValueTypeNames are a much richer and wider set of types, and it
is this type that is looked at during opinion composition.

For most of the basic SdrPropertyTypes, we have direct mappings to
SdfValueTypeNames given the Sdr type and if it is an array.  For some of the
SdrPropertyTypes, we use metadata to aid the translation to a particular
SdfValueTypeName (see below).

Clients writing SdrParserPlugin sub-classes for Sdr need only be concerned with
a property's SdrPropertyType.  Sdr will handle the details of assigning the
correct SdfValueTypeName.


## Discussion of the special Sdr property types

Some SdrPropertyTypes are a little special because there is no reasonable
corresponding SdfValueTypeName, so we map them all to SdfValueTypeName->Token,
which is typically reserved for an Unknown type.

The special SdrPropertyTypes that map to 'Token' are:
- Struct -  Struct types
- Terminal - Certain properties represent 'terminal' ports (ie. surface,
             displacement, volume, etc)
- Vstruct - An abstract struct type that can connect to any other 'vstruct', and
            connections are only made if a matching vstruct member is found.

As described, these special SdrPropertyTypes cannot be represented as a
SdfValueTypeName, which is why we simply map them to 'Token'.  A user can
find the original struct type or terminal type of one of these properties by
examining the 'renderType' metadata on the property, since this original type
information is not preserved in either the SdrPropertyType or SdfValueTypeName.


## Sdr metadata that is used to determine SdrPropertyType

As mentioned previously, metadata can be used to drive the parsing of a
SdrPropertyType.  This metadata does need to be authored by shader writers.
Some of these metadata tags are:
- 'renderType' - The 'renderType' metadata should be specified for Struct,
   Terminal, and Vstruct properties.
   - On a Struct, the metadata would be 'renderType' = 'struct structName',
     where structName is the actual struct's typename
   - On a Terminal, the metadata would be 'renderType' = 'terminal terminalName'
     where terminalName is the actual kind of terminal
   - On a Vstruct, the metadata would be 'renderType' = 'vstruct', since there is
     no further specific type name for a vstruct
- 'role' - The 'role' metadata can be specified for any SdrPropertyType, and the
   value of 'role' will determine if the property will be transformed to a
   different SdrPropertyType.  This metadata is special in that parser plugin
   writers do NOT need to handle any SdrPropertyType transformations.  Parser
   writers simply need to parse the property as usual and allow
   SdrShaderProperty to apply any needed transformations to the SdrPropertyType.
   The 'role' metadata can only have the following predefined values:
   - 'none' - If 'role' is 'none', then the SdrPropertyType will be
     transformed to be as generic as possible.  For example, if a property of
     original SdrPropertyTypes->Color has 'role' specified as 'none', then the
     property will actually become SdrPropertyTypes->Float.

## Sdr metadata that is used to determine SdfValueTypeName

Some metadata is used to drive the conversion of an SdfValueTypeName.
Metadata that is used for SdfValueTypeName conversion is authored either by 
shader writers (SdrUsdDefinitionName), or it should be injected into an 
SdrShaderProperty by a parser plugin writer (IsAssetIdentifier).
This includes:
- SdrPropertyMetadata->IsAssetIdentifier - This metadata tag is injected by a
  parser if the parser determines that the property is an asset. The presence
  of this metadata tag then guides the type mapping to choose
  SdfValueTypeNames->Asset
- SdrPropertyMetadata->SdrUsdDefinitionType - This metadata, explicitly 
  authored in a shader definition, specifies the SdfValueTypeName as string. 
  Note that this metadata takes precendence in determining the SdfValueTypeName 
  for the SdrShaderProperty. Authors of shader definition will have to provide 
  explicit TfType value aliases (Refer SdfValueTypeName::GetAliasesAsTokens()) 
  associated with the SdfValueTypeName, which generally match the type
  declarations found in a usda file.
  Example "bool" for SdfValueTypeNames->Bool, "bool[]" for
  SdfValueTypeNames->BoolArray, etc. This is specifically important in
  determining types which are represented as an "int" in the sdr type system but
  should be represented as SdfValueTypeNames->Bool in the equivalent Sdf/USD
  representation. When sdrUsdDefinitionType is specified, Sdr will do its best
  to convert the default value provided in the shader definition into the
  requested SdfValueType.

## Some examples illustrating the treatment of property types

~~~~~~~~~~~~~{.usd}
shader TestOSLShader
(
    color foo = color(1.0, 1.0 1.0),
    token bar = "baz",
    token surface = ""
    [[
        string renderType = "terminal surface"
    ]]
)
~~~~~~~~~~~~~
In the above example, the properties would be translated as follows:

Property  |SdrPropertyType            |SdfValueTypeName
:-------- |:------------------------- |:----------------
foo       |SdrPropertyTypes->Color    |SdfValueTypeNames->Color
bar       |SdrPropertyTypes->String   |SdfValueTypeNames->String
surface   |SdrPropertyTypes->Terminal |SdfValueTypeNames->Token

*/
